import java.util.*;

// Class to represent a Room in the hotel
class Room {
    private int roomNumber;
    private String roomType;  // Single, Double, Suite
    private double pricePerNight;
    private boolean isAvailable;

    public Room(int roomNumber, String roomType, double pricePerNight) {
        this.roomNumber = roomNumber;
        this.roomType = roomType;
        this.pricePerNight = pricePerNight;
        this.isAvailable = true;
    }

    public int getRoomNumber() {
        return roomNumber;
    }

    public String getRoomType() {
        return roomType;
    }

    public double getPricePerNight() {
        return pricePerNight;
    }

    public boolean isAvailable() {
        return isAvailable;
    }

    public void setAvailable(boolean available) {
        this.isAvailable = available;
    }

    @Override
    public String toString() {
        return "Room Number: " + roomNumber + " | Type: " + roomType + " | Price per night: $" + pricePerNight + " | Available: " + isAvailable;
    }
}

// Class to represent a Reservation
class Reservation {
    private Room room;
    private String guestName;
    private String checkInDate;
    private String checkOutDate;

    public Reservation(Room room, String guestName, String checkInDate, String checkOutDate) {
        this.room = room;
        this.guestName = guestName;
        this.checkInDate = checkInDate;
        this.checkOutDate = checkOutDate;
    }

    public Room getRoom() {
        return room;
    }

    public String getGuestName() {
        return guestName;
    }

    public String getCheckInDate() {
        return checkInDate;
    }

    public String getCheckOutDate() {
        return checkOutDate;
    }

    @Override
    public String toString() {
        return "Reservation for " + guestName + " | Room: " + room.getRoomNumber() + " | Check-in: " + checkInDate + " | Check-out: " + checkOutDate;
    }
}

// Class to simulate payment processing
class Payment {
    public static boolean processPayment(double amount, String paymentMethod) {
        // Simulate payment processing (for real system, you would integrate a payment gateway)
        System.out.println("Processing payment of $" + amount + " using " + paymentMethod + "...");
        System.out.println("Payment Successful.");
        return true;
    }
}

// Class to manage the hotel and reservations
class Hotel {
    private List<Room> rooms;
    private List<Reservation> reservations;

    public Hotel() {
        rooms = new ArrayList<>();
        reservations = new ArrayList<>();
        initializeRooms(); // Initialize the hotel with some rooms
    }

    // Initialize hotel rooms with different types and prices
    private void initializeRooms() {
        rooms.add(new Room(101, "Single", 100));
        rooms.add(new Room(102, "Single", 100));
        rooms.add(new Room(201, "Double", 150));
        rooms.add(new Room(202, "Double", 150));
        rooms.add(new Room(301, "Suite", 250));
    }

    // Search for available rooms based on type
    public List<Room> searchAvailableRooms(String roomType) {
        List<Room> availableRooms = new ArrayList<>();
        for (Room room : rooms) {
            if (room.isAvailable() && room.getRoomType().equalsIgnoreCase(roomType)) {
                availableRooms.add(room);
            }
        }
        return availableRooms;
    }

    // Make a reservation
    public boolean makeReservation(String guestName, String roomType, String checkInDate, String checkOutDate) {
        List<Room> availableRooms = searchAvailableRooms(roomType);
        if (availableRooms.isEmpty()) {
            System.out.println("No available rooms of type: " + roomType);
            return false;
        }

        // Pick the first available room
        Room roomToBook = availableRooms.get(0);
        roomToBook.setAvailable(false); // Mark room as booked
        Reservation reservation = new Reservation(roomToBook, guestName, checkInDate, checkOutDate);
        reservations.add(reservation);

        System.out.println("Reservation successful!");
        System.out.println(reservation);
        return true;
    }

    // View all reservations
    public void viewReservations() {
        if (reservations.isEmpty()) {
            System.out.println("No reservations made yet.");
            return;
        }
        for (Reservation reservation : reservations) {
            System.out.println(reservation);
        }
    }
}

// Main class to manage the system
public class HotelReservationSystem {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Hotel hotel = new Hotel();
        
        while (true) {
            System.out.println("\n--- Hotel Reservation System ---");
            System.out.println("1. Search for available rooms");
            System.out.println("2. Make a reservation");
            System.out.println("3. View all reservations");
            System.out.println("4. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();
            scanner.nextLine();  // Consume newline

            switch (choice) {
                case 1:
                    System.out.print("Enter room type (Single/Double/Suite): ");
                    String roomType = scanner.nextLine();
                    List<Room> availableRooms = hotel.searchAvailableRooms(roomType);
                    if (availableRooms.isEmpty()) {
                        System.out.println("No available rooms of type " + roomType);
                    } else {
                        System.out.println("Available rooms:");
                        for (Room room : availableRooms) {
                            System.out.println(room);
                        }
                    }
                    break;
                
                case 2:
                    System.out.print("Enter guest name: ");
                    String guestName = scanner.nextLine();
                    System.out.print("Enter room type (Single/Double/Suite): ");
                    roomType = scanner.nextLine();
                    System.out.print("Enter check-in date (yyyy-MM-dd): ");
                    String checkInDate = scanner.nextLine();
                    System.out.print("Enter check-out date (yyyy-MM-dd): ");
                    String checkOutDate = scanner.nextLine();

                    // Make the reservation
                    if (hotel.makeReservation(guestName, roomType, checkInDate, checkOutDate)) {
                        // Simulate payment processing
                        System.out.print("Enter payment method (Credit/Debit/Cash): ");
                        String paymentMethod = scanner.nextLine();
                        Room bookedRoom = hotel.searchAvailableRooms(roomType).get(0); // Get the first available room for payment
                        Payment.processPayment(bookedRoom.getPricePerNight(), paymentMethod);
                    }
                    break;

                case 3:
                    hotel.viewReservations();
                    break;

                case 4:
                    System.out.println("Exiting system...");
                    scanner.close();
                    System.exit(0);
                    break;

                default:
                    System.out.println("Invalid option. Please try again.");
                    break;
            }
        }
    }
}
